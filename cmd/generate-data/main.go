package main

import (
	"bufio"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/dave/jennifer/jen"
)

// nolint:forbidigo
func main() {
	src := os.Args[1]

	fmt.Printf("Reading files from %s...\n", src)

	files, err := filepath.Glob(filepath.Join(src, "*.txt"))
	if err != nil {
		panic(err)
	}

	// Collect all language codes
	var langs []string
	for _, file := range files {
		filename := filepath.Base(file)
		lang := strings.TrimSuffix(filename, ".txt")
		langs = append(langs, lang)
	}

	g, err := generateDefFile(langs)
	if err != nil {
		panic(err)
	}

	out := filepath.Join("data", "all.go")

	fmt.Printf("Generating %s...\n", out)

	if err := g.Save(out); err != nil {
		panic(err)
	}

	for _, file := range files {
		filename := filepath.Base(file)
		lang := strings.TrimSuffix(filename, ".txt")

		words, err := readWords(file)
		if err != nil {
			panic(err)
		}

		g, err := generateLangFile(lang, words)
		if err != nil {
			panic(err)
		}

		out := filepath.Join("data", lang+".go")

		fmt.Printf("Generating %s...\n", out)

		if err := g.Save(out); err != nil {
			panic(err)
		}
	}
}

func readWords(file string) ([]string, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, fmt.Errorf("failed to open file: %w", err)
	}
	defer f.Close()

	exists := make(map[string]struct{})

	var words []string

	scanner := bufio.NewScanner(f)

	for scanner.Scan() {
		word := scanner.Text()

		if _, ok := exists[word]; ok {
			continue
		}

		words = append(words, word)
		exists[word] = struct{}{}
	}

	return words, scanner.Err() // nolint:wrapcheck
}

func generateLangFile(lang string, words []string) (*jen.File, error) {
	f := jen.NewFile("data")
	f.HeaderComment("Code generated by generate-data. DO NOT EDIT.")

	mapValues := jen.Dict{}

	for _, word := range words {
		mapValues[jen.Lit(word)] = jen.Values()
	}

	functionName := "load" + strings.Title(lang)

	f.Func().Id(functionName).Params().Map(jen.String()).Struct().Block(
		jen.Return(jen.Map(jen.String()).Struct().Values(mapValues)),
	)

	return f, nil
}

func generateDefFile(langs []string) (*jen.File, error) {
	f := jen.NewFile("data")
	f.HeaderComment("Code generated by generate-data. DO NOT EDIT.")

	// Add import for fmt
	f.ImportName("fmt", "fmt")

	// Generate LoadLanguage function
	switchCases := make([]jen.Code, 0, len(langs))
	for _, lang := range langs {
		functionName := "load" + strings.Title(lang)
		switchCases = append(switchCases,
			jen.Case(jen.Lit(lang)).Block(
				jen.Return(jen.Id(functionName).Call(), jen.Nil()),
			),
		)
	}

	// Add default case
	switchCases = append(switchCases,
		jen.Default().Block(
			jen.Return(jen.Nil(), jen.Qual("fmt", "Errorf").Call(jen.Lit("unsupported language: %s"), jen.Id("lang"))),
		),
	)

	f.Comment("LoadLanguage loads a specific language's stopwords")
	f.Func().Id("LoadLanguage").Params(jen.Id("lang").String()).Params(jen.Map(jen.String()).Struct(), jen.Error()).Block(
		jen.Switch(jen.Id("lang")).Block(switchCases...),
	)

	// Generate GetSupportedLanguages function
	langLiterals := make([]jen.Code, 0, len(langs))
	for _, lang := range langs {
		langLiterals = append(langLiterals, jen.Lit(lang))
	}

	f.Comment("GetSupportedLanguages returns a list of all supported languages")
	f.Func().Id("GetSupportedLanguages").Params().Index().String().Block(
		jen.Return(jen.Index().String().Values(langLiterals...)),
	)

	return f, nil
}
