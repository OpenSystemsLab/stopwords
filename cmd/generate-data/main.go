package main

import (
	"bufio"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/dave/jennifer/jen"
)

func main() {
	src := os.Args[1]

	fmt.Printf("Reading files from %s...\n", src)

	files, err := filepath.Glob(filepath.Join(src, "*.txt"))
	if err != nil {
		panic(err)
	}

	g, err := generateDefFile()
	if err != nil {
		panic(err)
	}

	out := filepath.Join("data", "all.go")

	fmt.Printf("Generating %s...\n", out)

	if err := g.Save(out); err != nil {
		panic(err)
	}

	for _, file := range files {
		filename := filepath.Base(file)
		lang := strings.TrimSuffix(filename, ".txt")

		words, err := readWords(file)
		if err != nil {
			panic(err)
		}

		g, err := generateLangFile(lang, words)
		if err != nil {
			panic(err)
		}

		out := filepath.Join("data", lang+".go")

		fmt.Printf("Generating %s...\n", out)

		if err := g.Save(out); err != nil {
			panic(err)
		}
	}
}

func readWords(file string) ([]string, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, err
	}
	defer f.Close()

	exists := make(map[string]struct{})

	var words []string

	scanner := bufio.NewScanner(f)

	for scanner.Scan() {
		word := scanner.Text()

		if _, ok := exists[word]; ok {
			continue
		}

		words = append(words, word)
		exists[word] = struct{}{}
	}

	return words, scanner.Err()
}

func generateLangFile(lang string, words []string) (*jen.File, error) {
	f := jen.NewFile("data")
	f.HeaderComment("Code generated by generate-data. DO NOT EDIT.")

	mapValues := jen.Dict{}

	for _, word := range words {
		mapValues[jen.Lit(word)] = jen.Values()
	}

	f.Func().Id("init").Params().Block(
		jen.Id("Languages").Index(jen.Lit(lang)).Op("=").Map(jen.String()).Struct().Values(mapValues),
	)

	return f, nil
}

func generateDefFile() (*jen.File, error) {
	f := jen.NewFile("data")
	f.HeaderComment("Code generated by generate-data. DO NOT EDIT.")

	f.Var().Id("Languages").Op("=").Map(jen.String()).Map(jen.String()).Struct().Values()

	return f, nil
}
